####################
5th Aug. 2023
Class 1
DCP-Aug-Batch
####################

#######################
DAY - 1 - 5th Aug. 2023
#######################


		Introduction to DevOps !!!
		
		Fundamentals of DevOps :::
		
		Software ?	--> Collection of Programs
		
		Software / Application ?
		
		Types of Applications ?
			- Desktop Application
			- Web Application
			- Mobile Application

			E_Commerce Portal --> www.amazon.com
			
		Software Development Life Cycle - (SDLC)
			- Requirement Analysis
			- Design 
			- Code/Development
			- Testing 
			- Deployment/Implementation
			- Maintainence/Monitor


		Waterfall Model - Is linear in fashion/Top-Down Approach
						
			E_Commerce Portal 		==> 9 Months to complete this proj.
			Project 1: Core
				- Requirement Analysis		10 func. +2 Func
				- Design 
				- Code/Development
				- Testing 
				- Deployment/Implementation
				- Maintainence/Monitor		
			
			Project 2: Enhancement
				- Requirement Analysis		10 func. +2 Func
				- Design 
				- Code/Development
				- Testing 
				- Deployment/Implementation
				- Maintainence/Monitor		

		Agile Methodologies :::::
			
			E_Commerce Portal 		==> 9 Months to complete this proj.
			
			Modules / Iterations 

			Iteration1 - 								developer1
				- Requirement Analysis		10 func.
				- Design 
				- Code/Development
				- Testing 
				- Implementation
				- Maintainence/Monitor	
				
			Iteration2 - 								
				- Requirement Analysis		10 func.
				- Design 
				- Code/Development
				- Testing 
				- Implementation
				- Maintainence/Monitor	
			
			.
			.
			.			
			
			Iteration10 - 
				- Requirement Analysis		10 func.
				- Design 
				- Code/Development
				- Testing 
				- Implementation
				- Maintainence/Monitor	

			Iteration10.1 - 
				- Requirement Analysis		
				- Design 
				- Code/Development
				- Testing 
				- Implementation
				- Maintainence/Monitor	
				
				
			Using Agile Methodologies we can achieve :::
			
				- Continuous Development
				- Continuous Integration
				- Continuous Testing
				- Continuous Delivery
						--> Continuous Delivery - Is a process of Releasing the software product to Production Environment
												- This requires Manual intervension/Manual Approvals for Production Release.
				
			But, We can't achieve :
			
				- Continuous Deployment :
						- Is a process of Releasing the software product to Production Environment
                        - This doesn't requires any Manual intervension/Manual Approvals for Production Release.
						
						
						
		DevOps ::::
		
			Is a software Development Strategy, which helps to promote the collaboration between the teams like Development Team & Operations Team to achieve Continuous Development, Continuous Integration, Continuous Testing, Continuous Delivery, Continuous Deployment and Continuous Montoring, - in more automated fashion.
			
		Teams :::
		
		SDLC 
		
			- Infra-Structure Management Team 
			- Application Development Team
			- Testing Team 
			- Release Management Team
			- Production Support Team
			- Production Monitoring Team
			- Security Team
			
		
		Environments :::
		
			Non-Prod Environment(Server/VM/Infra-Structure)										Production Environment
			
				- Dev Environment
				- Testing Environment
					QA - Quality Assurance 
					UAT - User Acceptance Testing 						========>					Prod Environment	
				
		
		DevOps Stages ::: / DevOps Tools ::::
		
		
			Infra-Structure Management :::
					Infra-Structure Provisioning/Creating servers	---> Terraform 
					Infra-Structure Configuration					---> Ansible
		
		
			Continuous Development
				---> 		It is the capability of the Dev Team to Continuously Develop/Code the application.
				Developers ???
				
				- Code the application :::
						IDEs - Integrated Development Environment - Eclipse based IDEs/ Visual Studio Code / Visual Studio / Pycharm 
						GIT/Jenkins
				
				- build the application -- Is the process of Compiling the source code & Create Artifacts(Binaries)
					Maven/Gradle/Ant
				- Unit Testing 
				- Deploy the changes for further Testing - 
				- Send the Notifications to Testing Team 
			
			Continuous Integration
				---> 		It is the capability of the Dev Team to Continuously Integrate the changes for further Testing 
							Jenkins/Docker/Kubernetes/Ansible
				
			
			Continuous Testing
				---> 		Perform Automated testing using some testing tools like TestNG/Selenium, Jenkins 
				
			Continuous Delivery / Continuous Deployment   -- Jenkins/Docker/Kubernetes/Ansible
				---> 		Both Continuous Delivery / Continuous Deployment  process are used to release the changes to production.
					Continuous Delivery ==> This needs manual intervension/Manual Approvals for Production Release
					
					Continuous Deployment ===> Starting from Build till production release everything is automated without any manual intervension
			
			
			Continuous Montoring
				--->		Is used monitor the Applications/Infra-Structure
									Prometheus/Grafana/Nagios/Splunk/Dynatrace....
									AppDynamics
		
		
		
		DevOps Tools :::
		
			Self-Managed Tools ::
				Open Source Tools 
				 git,jenkins,docker/kubernetes/ansible/terraform
						
			Managed Services/Tools 
				Paid Tools 
				
		
		How to Implement DevOps ::::
		
			Based on the Application Architecture ::::
			
				Monolith Application Architecture :::
					It is Tightly coupled application.	
				
				Micro-Service Based Application Architecture :::
					It is loosely coupled Application.
					Each function/Module is considered a service.
					Each service can be independently developed and deployed to prod envirnment.
					
					
					
		www.amazon.com
		
			Sign_up				-- Micro-Service1 -> Developer1 - code the changes, test, deploy to further testing - QA/UAT , Release to Production
			Sign_In				-- Micro-Service2
			Search
			Add to Cart
			Place the order 
			Payment
			Confirm order 
			Track
					
		
		Tele-Comm Domain ::::
		Tele-Comm Service Provider1 --> Introduce New Offer to their customers --> 
		Tele-Comm Service Provider2 --> Introduce New Offer to their customers --> 
		
		
			DevOps -->
			
				Continuous Delivery --> Downtime 
				Continuous Deployment 
		
		
			Production Release Activities ::::
			
			
		Banking :::

			Online Banking Service 
			Online Credit-Card Service 
			
				Continuous Delivery --> Downtime 
				
					Production Deployment Window --> 4hrs to 6 Hrs. - DownTime 
							1. It is not working as expected!
									- Fix that issue. 
									- Revert the changes. 
									
		
		facebook.com
		amazon.com
		Netflix
		Prime
		
				Continuous Deployment 
				
				
		DevOps is all about :: 
			People / Process / Tools
								

				- DevOps Team :::
				
					- Infra-Structure Management Team 
					- Application Development Team
					- Testing Team 
					- Release Management Team
					- Production Support Team
					- Production Monitoring Team
					- Security Team		
					
					
			Is a software Development Strategy, which helps to promote the collaboration between the teams like Development Team & Operations Team to achieve Continuous Development, Continuous Integration, Continuous Testing, Continuous Delivery, Continuous Deployment and Continuous Montoring, - in more automated fashion.
			
			
			DevOps Team ::::
			
				DevOps Associate / Sr. DevOps Asso. /DevOps Engg. / Sr. DevOps Engg. /DevOps Leads / Sr. DevOps Leads / DevOps Architects /DevOps Consultant / SRE.....
				
			1. Detailed DevOps Assessment.
			2. Give Recommendations.
			
			
				Ultimately, DevOps is implemented to achieve Continous Improvement for longer run!
				
				
			waterfall,Agile,DevOps,DevSecOps,GitOps,SRE,MLOps,AIOps............................
			
#######################
DAY - 2 - 6th Aug. 2023
#######################

			deployment ==> It is a process of copying the artifacts from one envirnment to another.
			
			Version Control System Using GIT.
			
			
			Development Phase ::
				Jsp/html/*.java
				
				
			index.html 		--> save as a flat file.
			<html>
			---
			--adfasdfas-
			-adfasf
			-sd
			-fasdfa
			-sdf
			-asdfsdfsa
			-asdfsdfsaa
			asdfas
			dfasdfasdf
			sdf
			</html>
			
			Version Control System ::::
			
			index.html_v1.0 		--> Tags/Version/Commit_Id
			index.html_v1.1
			index.html_v1.2
			
			Types of Version Control System :::
			
			Local VCS
			Central VCS 
			Distributed VCS -- GIT 
			
				- GIT is open source Distributed Version Control System 
						- It is used to Version Control the source Code Changes 
						- It is used to Track the Changes 
						- It is used to perform Parallel Development
						
			Install GIT and Manage GIT 
			
			- GIT File Workflow
			
			Git Misc. Command 
			
			GIT Branching Strategies
			Handle Remote Repositories
			
			Repository - Collection of Files & Folders .
			
			
			GIT File Workflow :::
			
			
			Local Machine 																		Remote Server 
			
			Working Dir.		Staging/Index Area			  Local Repo.								Remote Repo.
			 file1.java ------->	file1.java 	  ----------> file.Java			==========>					file1.java
						git add					  git commit					git push
			
			
			
			git init 	==> Is used to initialize a new git repo.
							It create a GIT_Directory & default branch called 'master'.
							
			git clone 	==> It is used to clone/copy the entire remote repo. into Local Machine.
			
			git add 	==> It is used to add the changes from Working dir. to Staging Area 
			
			git commit 	==> It is used to commit the changes from staging area to Local Repo.
			
			git push 	==> It is used to Push the changes from Local Repo. to Remote Repo.
			
			
			git fetch/git pull ==> Both are used to handle incremental changes from remote repository.
			
			git fetch 	==> It is used to check if there is any incremental changes present in remote repo.
							If there are any changes exist, The incremental changes will be updated only the local repo.
			
			git pull 	==> It is used to check if there is any incremental changes present in remote repo.
							If there are any changes exist, The incremental changes will be updated in the local repo. as well as in the working dir.
							===> git fetch + git merge
			
			
			git fork 	==> It is used to copy from one remote repo to another remote repo.
			
			Developers' WorkLoad ::
			
				Enhancement/Bugfix Project
				
				New Project 
			
			
			Lab Requirements ::::
			
			
				Install GIT and Manage GIT 
				
				Local Machine -- Install Git Cli
				
				Remote 		  -- Github 
				
				1. Create an Account in Github.  https://github.com/
					
				2. Create a Free Tier Account in AWS Cloud Platform
						Create Linux Machines - Virtual Machines
						Installing all the required tools.
						To connect to AWS Instance :
							- EC2 Instance Connect
 							- SSH Client
							   - MobaXterm - Windows Users
							- Terminals
				3. Docker hub account
				
			
			Install and Manage GIT ::::
			
			In Windows Machine ::
				GIT BASH			===> *
				GIT CLI 
				GIT GUI

				
			Create a Root-Directory :		
				Project_Directory
					==
					---
			
			git status ---
			
			how to config User_Name and Email_ID
			
			GIT Config :
			
				Global Config				
					git config --global user.name "LoksaiETA"
					git config --global user.email "eta@xys.com"
				
				
				Local Config
					git config user.name "testuser1"
					git config user.email "eta@xys.com"
					
		
		
			git add <file_name>
			git add a1.doc e1.md
			git add *.txt
			git add .
			
			git show <commit_id>
			
			git log 			
			git log --oneline
			
			git log -2
			git log --oneline -2
			
			git log --stat 
			git log --stat -1
			
			
			unstage :::
			
			
			git rm --cached <index.jsp> ==> This will jus remove the changes from staging area.
			
			git rm -f index.jsp			==> This will remove from both staging area and working dir.
				
  501  git --version
  502  cd d:
  503  cd e:
  504  clear
  505  mkdir DCP-5th-Aug
  506  cd DCP-5th-Aug/
  507  mkdir samplerepo1
  508  cd samplerepo1/
  509  clear
  510  ls
  511  git init
  512  ls -a
  513  cd .git/
  514  ls
  515  cd ..
  516  clear
  517  ls
  518  git status
  519  echo "Hello"
  520  echo "record1" >> file1.txt
  521  ls
  522  cat file1.txt
  523  echo "record2" >> file1.txt
  524  cat file1.txt
  525  git status
  526  git add file1.txt
  527  git status
  528  git commit -m "Created file1.txt"
  529  git status
  530  git log
  531  pwd
  532  ls
  533  clear
  534  git log
  535  ls -a
  536  git config --global user.name "LoksaiETA"
  537  echo "rec1" >> file2.txt
  538  git add file2.txt
  539  git commit -m "Created file2.txt"
  540  git log
  541  git config user.name "testuser1"
  542  echo "rec1" >> file3.txt
  543  git add file3.txt
  544  git commit -m "Created file3.txt"
  545  git log
  546  cd ..
  547  mkdir samplerepo2
  548  cd samplerepo2/
  549  ls
  550  clear
  551  git status
  552  git init
  553  git status
  554  echo "rec1" >> s1.txt
  555  git add s1.txt
  556  git commit -m "Created S1.txt"
  557  git log
  558  echo "rec1"
  559  echo "rec1" >> l1.txt
  560  echo "rec2" >> l1.txt
  561  echo "rec3" >> l1.txt
  562  echo "rec3" >> l1.txt
  563  echo "rec3" >> l1.txt
  564  echo "rec3" >> l1.txt
  565  echo "rec3" >> l1.txt
  566* echo "rec3" > l1.txt
  567  cat l1.txt
  568  echo "RECORD" > l1.txt
  569  cat l1.txt
  570  clear
  571  git status
  572  git add l1.txt
  573  git commit -m "created L1.txt"
  574  ls
  575  clear
  576  git log
  577  git status
  578  ls
  579  clear
  580  echo "rec1" >> w1.txt
  581  echo "rec1" >> w2.txt
  582  echo "rec1" >> w2.java
  583  echo "rec1" >> q2.java
  584  echo "rec1" >> a1.doc
  585  echo "rec1" >> e1.md
  586  git status
  587  git add *.txt
  588  git status
  589  git add .
  590  git status
  591  git
  592  clear
  593  git status
  594  git commit -m "Files Created"
  595  git log
  596  git log --oneline
  597  git show 9a1fa44
  598  clear
  599  git log --oneline
  600  git log --oneline -2
  601  git log --oneline -1
  602  git log -1
  603  git log --stat
  604  clear
  605  clear
  606  ls
  607  git status
  608  echo "index.jsp file contents" >> index.jsp
  609  git status
  610  ls
  611  git add .
  612  git status
  613  git rm --cached index.jsp
  614  ls
  615  git status
  616  git add .
  617  clear
  618  git status
  619  git rm -f index.jsp
  620  ls
  621  history
			
	
Excellent 1		 5
good 0					
bad avg -1		-5



#########################
DAY - 3 - 12th Aug. 2023
#########################

		git ignore
		git reset 
		git revert 
		git branching strategies 
		
		
		
		git ignore ::::
		
			It is used to ignore the files.
			If you don' want to track any file changes, we can simple mark it ignored files.
			
			
		Java_Web_Appln. Project 
			
		Java_Web_Appln.
			src 
				main
					webapp/*.java 
					test/*.java 
			targets
				*.war
			pom.xml 
			application.properties
			application.config
			
		git repo ::
			file --> .gitignore
				*.war 
				targets/
				*.properties 
				*.doc 
				*.readme
				DB_Credentials.json
			
		Java_Web_Appln.		3-tier archi. -- frontend,backend(Database),business_Logic
			src 
				main
					webapp/*.java 		-> signin.java
					test/*.java 
			targets
				*.war					-> signin.war
			pom.xml 
			application.properties
			application.config
			DB_Credentials.json
			
		git add .
		
		git commit -m "Project"
		
		git push 					===>  	Remote Repo.

.gitignore ---> 

		
		git reset 
		git revert 		
		
		
		git reset  ::::
		
			It is used to undo the changes from git repo. 
			
		HEAD 
		ADD 
		COMMIT 
		
		
		git reset 
		
				---> git reset --soft <commit_id> 
							==> It just remove the changes from local repo.
								The Changes will be back to Staging area and it will be available in working directory.
								
				---> git reset --mixed <commit_id> 
							==> It just remove the changes from local repo. as well from staging area.
								But the Changes still remains in working directory.								
			
				---> git reset --hard <commit_id> 
							==> It remove the changes from local repo., staging area as well as from working directory
								This is considered as permanent deletion of data/file.
								
				********Reset should NOT be used in the shared repository.********
				Reset will NEVER Create New commit point for its changes.
								
								
		git revert
		
			===> 	It is used to undo the changes from git repo. 
					It will create a new commit point for every revert action to keep track of the changes.
					This can be used in shared repository
					
					
					git revert <commit_id>
					
					
		git branching strategies :::
				It is used to perform Parallel Development
				
				
		git init ::::
					It will initialize a repo. -> GIT_DIR
					It create default branch 'master'    ==> Its considered as prod copy.
					
			Developers' WorkLoad ::
			
				Enhancement/Bugfix Project
				New Project 
				

		
			Repo1:
				master - cm1,cm2,c3,f1cm1,f1cm2
					feature_Branch1 - cm1,cm2,c3,f1cm1,f1cm2
					feature_Branch2 - cm1,cm2,c3,f1cm1,f1cm2				
					
					
		Scenario 1 :::
		
			Repo1:
				master - cm1,cm2,c3
					feature_Branch1 - cm1,cm2,c3

		Scenario 2 :::
					
			Repo1:
				master - cm1,cm2,c3
					Developer_Branch - cm1,cm2,c3
						feature_Branch1 - cm1,cm2,c3
						feature_Branch2 - cm1,cm2,c3

		Scenario 3 :::
					
			Repo1:
				master - cm1,cm2,c3
					Integration_Branch - cm1,cm2,cm3
						Developer1_Branch - cm1,cm2,c3
							feature_Branch1 - cm1,cm2,c3
							feature_Branch2 - cm1,cm2,c3
						Developer2_Branch - cm1,cm2,c3
							feature_Branch1 - cm1,cm2,c3
							feature_Branch2 - cm1,cm2,c3
							
		Scenario 4 :::
					
			Repo1:
				master - cm1,cm2,c3
					Release_Branch - cm1,cm2,c3
						Integration_Branch1(Team1) - cm1,cm2,cm3
							Developer1_Branch - cm1,cm2,c3
								feature_Branch1 - cm1,cm2,c3
								feature_Branch2 - cm1,cm2,c3
							Developer2_Branch - cm1,cm2,c3
								feature_Branch1 - cm1,cm2,c3
								feature_Branch2 - cm1,cm2,c3
						Integration_Branch2(Team2) - cm1,cm2,cm3
							Developer1_Branch - cm1,cm2,c3
								feature_Branch1 - cm1,cm2,c3
								feature_Branch2 - cm1,cm2,c3
							Developer2_Branch - cm1,cm2,c3
								feature_Branch1 - cm1,cm2,c3
								feature_Branch2 - cm1,cm2,c3
								
								
			Demo on GIT Repositories :::
				
			Repo1:
				master - cm1,cm2,c3
					feature_Branch1 - cm1,cm2,c3
					feature_Branch2 - cm1,cm2,c3
					
			git branch 
			git branch creation steps :::
			
			
			master: 
				git switch -c feature1
				git branch feature2
				git checkout -b feature3 
				
			git merge ==> 	It is used to merge the changes from current branch to target branch
							git merge command should be executed from target branch
							
			Merge Conflict ::::
					Whenever we try to update the same file at same record level, merge conflict will occur.
							
			Fix the Merge Conflict ::
			
			How to fix Merge Conflict ????
			
				- Identify the file that is causing merge conflict.
				- Review the file content in target branch
				- Deside which change has to retained in target branch.
				- Update the file in target branch with exact file content. (By removing junk data)
				- git add and commit to complete the merge action.

			In DevOps era.........
			
			Always we should prevent merge conflict.!!!
			

			
Summary ::

		git reset / revert 
		git branching strategies
		create branches 
		merge the changes to target branch 
		handle merge conflicts!
			
Next : 

			
		git rebase :::
		git squash :::
				
			
			
			
			
			
			
